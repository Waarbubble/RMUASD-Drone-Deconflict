// Generated by gencpp from file drone_decon/UTMDrone.msg
// DO NOT EDIT!


#ifndef DRONE_DECON_MESSAGE_UTMDRONE_H
#define DRONE_DECON_MESSAGE_UTMDRONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_decon/GPS.h>
#include <drone_decon/GPS.h>

namespace drone_decon
{
template <class ContainerAllocator>
struct UTMDrone_
{
  typedef UTMDrone_<ContainerAllocator> Type;

  UTMDrone_()
    : next_WP()
    , cur_pos()
    , next_vel(0.0)
    , cur_vel(0.0)
    , next_heading(0.0)
    , cur_heading(0.0)
    , time(0)
    , gps_time(0)
    , battery_soc(0.0)
    , drone_priority(0)
    , ETA_next_WP(0)
    , drone_id(0)  {
    }
  UTMDrone_(const ContainerAllocator& _alloc)
    : next_WP(_alloc)
    , cur_pos(_alloc)
    , next_vel(0.0)
    , cur_vel(0.0)
    , next_heading(0.0)
    , cur_heading(0.0)
    , time(0)
    , gps_time(0)
    , battery_soc(0.0)
    , drone_priority(0)
    , ETA_next_WP(0)
    , drone_id(0)  {
  (void)_alloc;
    }



   typedef  ::drone_decon::GPS_<ContainerAllocator>  _next_WP_type;
  _next_WP_type next_WP;

   typedef  ::drone_decon::GPS_<ContainerAllocator>  _cur_pos_type;
  _cur_pos_type cur_pos;

   typedef double _next_vel_type;
  _next_vel_type next_vel;

   typedef double _cur_vel_type;
  _cur_vel_type cur_vel;

   typedef double _next_heading_type;
  _next_heading_type next_heading;

   typedef double _cur_heading_type;
  _cur_heading_type cur_heading;

   typedef int64_t _time_type;
  _time_type time;

   typedef int64_t _gps_time_type;
  _gps_time_type gps_time;

   typedef double _battery_soc_type;
  _battery_soc_type battery_soc;

   typedef int16_t _drone_priority_type;
  _drone_priority_type drone_priority;

   typedef int64_t _ETA_next_WP_type;
  _ETA_next_WP_type ETA_next_WP;

   typedef uint32_t _drone_id_type;
  _drone_id_type drone_id;





  typedef boost::shared_ptr< ::drone_decon::UTMDrone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_decon::UTMDrone_<ContainerAllocator> const> ConstPtr;

}; // struct UTMDrone_

typedef ::drone_decon::UTMDrone_<std::allocator<void> > UTMDrone;

typedef boost::shared_ptr< ::drone_decon::UTMDrone > UTMDronePtr;
typedef boost::shared_ptr< ::drone_decon::UTMDrone const> UTMDroneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_decon::UTMDrone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_decon::UTMDrone_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drone_decon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'drone_decon': ['/home/andkgl/wspace/catkin_ws/src/RMUASD-Drone-Deconflict/drone_decon/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drone_decon::UTMDrone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_decon::UTMDrone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_decon::UTMDrone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_decon::UTMDrone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_decon::UTMDrone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_decon::UTMDrone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_decon::UTMDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a50c965492d94784376dc0227b21a5a4";
  }

  static const char* value(const ::drone_decon::UTMDrone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa50c965492d94784ULL;
  static const uint64_t static_value2 = 0x376dc0227b21a5a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_decon::UTMDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_decon/UTMDrone";
  }

  static const char* value(const ::drone_decon::UTMDrone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_decon::UTMDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GPS next_WP #\n\
GPS cur_pos #\n\
\n\
float64 next_vel #\n\
float64 cur_vel #\n\
\n\
float64 next_heading #\n\
float64 cur_heading #\n\
\n\
int64 time\n\
int64 gps_time #\n\
\n\
float64 battery_soc\n\
\n\
int16 drone_priority #\n\
\n\
int64 ETA_next_WP #\n\
\n\
uint32 drone_id #\n\
\n\
================================================================================\n\
MSG: drone_decon/GPS\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
\n\
";
  }

  static const char* value(const ::drone_decon::UTMDrone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_decon::UTMDrone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.next_WP);
      stream.next(m.cur_pos);
      stream.next(m.next_vel);
      stream.next(m.cur_vel);
      stream.next(m.next_heading);
      stream.next(m.cur_heading);
      stream.next(m.time);
      stream.next(m.gps_time);
      stream.next(m.battery_soc);
      stream.next(m.drone_priority);
      stream.next(m.ETA_next_WP);
      stream.next(m.drone_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UTMDrone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_decon::UTMDrone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_decon::UTMDrone_<ContainerAllocator>& v)
  {
    s << indent << "next_WP: ";
    s << std::endl;
    Printer< ::drone_decon::GPS_<ContainerAllocator> >::stream(s, indent + "  ", v.next_WP);
    s << indent << "cur_pos: ";
    s << std::endl;
    Printer< ::drone_decon::GPS_<ContainerAllocator> >::stream(s, indent + "  ", v.cur_pos);
    s << indent << "next_vel: ";
    Printer<double>::stream(s, indent + "  ", v.next_vel);
    s << indent << "cur_vel: ";
    Printer<double>::stream(s, indent + "  ", v.cur_vel);
    s << indent << "next_heading: ";
    Printer<double>::stream(s, indent + "  ", v.next_heading);
    s << indent << "cur_heading: ";
    Printer<double>::stream(s, indent + "  ", v.cur_heading);
    s << indent << "time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time);
    s << indent << "gps_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gps_time);
    s << indent << "battery_soc: ";
    Printer<double>::stream(s, indent + "  ", v.battery_soc);
    s << indent << "drone_priority: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_priority);
    s << indent << "ETA_next_WP: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ETA_next_WP);
    s << indent << "drone_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.drone_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_DECON_MESSAGE_UTMDRONE_H
