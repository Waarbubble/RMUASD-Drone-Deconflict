// Generated by gencpp from file drone_decon/RedirectDrone.msg
// DO NOT EDIT!


#ifndef DRONE_DECON_MESSAGE_REDIRECTDRONE_H
#define DRONE_DECON_MESSAGE_REDIRECTDRONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_decon/GPS.h>

namespace drone_decon
{
template <class ContainerAllocator>
struct RedirectDrone_
{
  typedef RedirectDrone_<ContainerAllocator> Type;

  RedirectDrone_()
    : drone_id(0)
    , position()
    , insertBeforeNextWayPoint(false)
    , standByAndReplanRouteAtPoint(false)  {
    }
  RedirectDrone_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , position(_alloc)
    , insertBeforeNextWayPoint(false)
    , standByAndReplanRouteAtPoint(false)  {
  (void)_alloc;
    }



   typedef uint32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef  ::drone_decon::GPS_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint8_t _insertBeforeNextWayPoint_type;
  _insertBeforeNextWayPoint_type insertBeforeNextWayPoint;

   typedef uint8_t _standByAndReplanRouteAtPoint_type;
  _standByAndReplanRouteAtPoint_type standByAndReplanRouteAtPoint;





  typedef boost::shared_ptr< ::drone_decon::RedirectDrone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_decon::RedirectDrone_<ContainerAllocator> const> ConstPtr;

}; // struct RedirectDrone_

typedef ::drone_decon::RedirectDrone_<std::allocator<void> > RedirectDrone;

typedef boost::shared_ptr< ::drone_decon::RedirectDrone > RedirectDronePtr;
typedef boost::shared_ptr< ::drone_decon::RedirectDrone const> RedirectDroneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_decon::RedirectDrone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_decon::RedirectDrone_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drone_decon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'drone_decon': ['/home/andkgl/wspace/catkin_ws/src/RMUASD-Drone-Deconflict/drone_decon/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drone_decon::RedirectDrone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_decon::RedirectDrone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_decon::RedirectDrone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_decon::RedirectDrone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_decon::RedirectDrone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_decon::RedirectDrone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_decon::RedirectDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07e5cac6757732dd9a419b2544615592";
  }

  static const char* value(const ::drone_decon::RedirectDrone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07e5cac6757732ddULL;
  static const uint64_t static_value2 = 0x9a419b2544615592ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_decon::RedirectDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_decon/RedirectDrone";
  }

  static const char* value(const ::drone_decon::RedirectDrone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_decon::RedirectDrone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 drone_id\n\
\n\
GPS position\n\
\n\
bool insertBeforeNextWayPoint\n\
bool standByAndReplanRouteAtPoint\n\
================================================================================\n\
MSG: drone_decon/GPS\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
\n\
";
  }

  static const char* value(const ::drone_decon::RedirectDrone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_decon::RedirectDrone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.position);
      stream.next(m.insertBeforeNextWayPoint);
      stream.next(m.standByAndReplanRouteAtPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RedirectDrone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_decon::RedirectDrone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_decon::RedirectDrone_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::drone_decon::GPS_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "insertBeforeNextWayPoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.insertBeforeNextWayPoint);
    s << indent << "standByAndReplanRouteAtPoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.standByAndReplanRouteAtPoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_DECON_MESSAGE_REDIRECTDRONE_H
