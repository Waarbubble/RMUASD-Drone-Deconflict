# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_decon/UTMDrone.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import drone_decon.msg

class UTMDrone(genpy.Message):
  _md5sum = "a50c965492d94784376dc0227b21a5a4"
  _type = "drone_decon/UTMDrone"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """GPS next_WP #
GPS cur_pos #

float64 next_vel #
float64 cur_vel #

float64 next_heading #
float64 cur_heading #

int64 time
int64 gps_time #

float64 battery_soc

int16 drone_priority #

int64 ETA_next_WP #

uint32 drone_id #

================================================================================
MSG: drone_decon/GPS
float64 latitude
float64 longitude
float64 altitude

"""
  __slots__ = ['next_WP','cur_pos','next_vel','cur_vel','next_heading','cur_heading','time','gps_time','battery_soc','drone_priority','ETA_next_WP','drone_id']
  _slot_types = ['drone_decon/GPS','drone_decon/GPS','float64','float64','float64','float64','int64','int64','float64','int16','int64','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       next_WP,cur_pos,next_vel,cur_vel,next_heading,cur_heading,time,gps_time,battery_soc,drone_priority,ETA_next_WP,drone_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UTMDrone, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.next_WP is None:
        self.next_WP = drone_decon.msg.GPS()
      if self.cur_pos is None:
        self.cur_pos = drone_decon.msg.GPS()
      if self.next_vel is None:
        self.next_vel = 0.
      if self.cur_vel is None:
        self.cur_vel = 0.
      if self.next_heading is None:
        self.next_heading = 0.
      if self.cur_heading is None:
        self.cur_heading = 0.
      if self.time is None:
        self.time = 0
      if self.gps_time is None:
        self.gps_time = 0
      if self.battery_soc is None:
        self.battery_soc = 0.
      if self.drone_priority is None:
        self.drone_priority = 0
      if self.ETA_next_WP is None:
        self.ETA_next_WP = 0
      if self.drone_id is None:
        self.drone_id = 0
    else:
      self.next_WP = drone_decon.msg.GPS()
      self.cur_pos = drone_decon.msg.GPS()
      self.next_vel = 0.
      self.cur_vel = 0.
      self.next_heading = 0.
      self.cur_heading = 0.
      self.time = 0
      self.gps_time = 0
      self.battery_soc = 0.
      self.drone_priority = 0
      self.ETA_next_WP = 0
      self.drone_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d2qdhqI().pack(_x.next_WP.latitude, _x.next_WP.longitude, _x.next_WP.altitude, _x.cur_pos.latitude, _x.cur_pos.longitude, _x.cur_pos.altitude, _x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.next_WP is None:
        self.next_WP = drone_decon.msg.GPS()
      if self.cur_pos is None:
        self.cur_pos = drone_decon.msg.GPS()
      end = 0
      _x = self
      start = end
      end += 118
      (_x.next_WP.latitude, _x.next_WP.longitude, _x.next_WP.altitude, _x.cur_pos.latitude, _x.cur_pos.longitude, _x.cur_pos.altitude, _x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id,) = _get_struct_10d2qdhqI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d2qdhqI().pack(_x.next_WP.latitude, _x.next_WP.longitude, _x.next_WP.altitude, _x.cur_pos.latitude, _x.cur_pos.longitude, _x.cur_pos.altitude, _x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.next_WP is None:
        self.next_WP = drone_decon.msg.GPS()
      if self.cur_pos is None:
        self.cur_pos = drone_decon.msg.GPS()
      end = 0
      _x = self
      start = end
      end += 118
      (_x.next_WP.latitude, _x.next_WP.longitude, _x.next_WP.altitude, _x.cur_pos.latitude, _x.cur_pos.longitude, _x.cur_pos.altitude, _x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id,) = _get_struct_10d2qdhqI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d2qdhqI = None
def _get_struct_10d2qdhqI():
    global _struct_10d2qdhqI
    if _struct_10d2qdhqI is None:
        _struct_10d2qdhqI = struct.Struct("<10d2qdhqI")
    return _struct_10d2qdhqI
