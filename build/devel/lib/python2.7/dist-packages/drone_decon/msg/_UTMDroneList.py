# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_decon/UTMDroneList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import drone_decon.msg

class UTMDroneList(genpy.Message):
  _md5sum = "c07f9db1359ae55284964655b2dfadf8"
  _type = "drone_decon/UTMDroneList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """UTMDrone[] drone_list
================================================================================
MSG: drone_decon/UTMDrone
GPS next_WP #
GPS cur_pos #

float64 next_vel #
float64 cur_vel #

float64 next_heading #
float64 cur_heading #

int64 time
int64 gps_time #

float64 battery_soc

int16 drone_priority #

int64 ETA_next_WP #

uint32 drone_id #

================================================================================
MSG: drone_decon/GPS
float64 latitude
float64 longitude
float64 altitude

"""
  __slots__ = ['drone_list']
  _slot_types = ['drone_decon/UTMDrone[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drone_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UTMDroneList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drone_list is None:
        self.drone_list = []
    else:
      self.drone_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.drone_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.drone_list:
        _v1 = val1.next_WP
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _v2 = val1.cur_pos
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _x = val1
        buff.write(_get_struct_4d2qdhqI().pack(_x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.drone_list is None:
        self.drone_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drone_list = []
      for i in range(0, length):
        val1 = drone_decon.msg.UTMDrone()
        _v3 = val1.next_WP
        _x = _v3
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.cur_pos
        _x = _v4
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 70
        (_x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id,) = _get_struct_4d2qdhqI().unpack(str[start:end])
        self.drone_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.drone_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.drone_list:
        _v5 = val1.next_WP
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _v6 = val1.cur_pos
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.latitude, _x.longitude, _x.altitude))
        _x = val1
        buff.write(_get_struct_4d2qdhqI().pack(_x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.drone_list is None:
        self.drone_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drone_list = []
      for i in range(0, length):
        val1 = drone_decon.msg.UTMDrone()
        _v7 = val1.next_WP
        _x = _v7
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.cur_pos
        _x = _v8
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 70
        (_x.next_vel, _x.cur_vel, _x.next_heading, _x.cur_heading, _x.time, _x.gps_time, _x.battery_soc, _x.drone_priority, _x.ETA_next_WP, _x.drone_id,) = _get_struct_4d2qdhqI().unpack(str[start:end])
        self.drone_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d2qdhqI = None
def _get_struct_4d2qdhqI():
    global _struct_4d2qdhqI
    if _struct_4d2qdhqI is None:
        _struct_4d2qdhqI = struct.Struct("<4d2qdhqI")
    return _struct_4d2qdhqI
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
