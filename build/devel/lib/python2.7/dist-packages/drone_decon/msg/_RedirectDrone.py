# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_decon/RedirectDrone.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import drone_decon.msg

class RedirectDrone(genpy.Message):
  _md5sum = "07e5cac6757732dd9a419b2544615592"
  _type = "drone_decon/RedirectDrone"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 drone_id

GPS position

bool insertBeforeNextWayPoint
bool standByAndReplanRouteAtPoint
================================================================================
MSG: drone_decon/GPS
float64 latitude
float64 longitude
float64 altitude

"""
  __slots__ = ['drone_id','position','insertBeforeNextWayPoint','standByAndReplanRouteAtPoint']
  _slot_types = ['uint32','drone_decon/GPS','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drone_id,position,insertBeforeNextWayPoint,standByAndReplanRouteAtPoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RedirectDrone, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drone_id is None:
        self.drone_id = 0
      if self.position is None:
        self.position = drone_decon.msg.GPS()
      if self.insertBeforeNextWayPoint is None:
        self.insertBeforeNextWayPoint = False
      if self.standByAndReplanRouteAtPoint is None:
        self.standByAndReplanRouteAtPoint = False
    else:
      self.drone_id = 0
      self.position = drone_decon.msg.GPS()
      self.insertBeforeNextWayPoint = False
      self.standByAndReplanRouteAtPoint = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3d2B().pack(_x.drone_id, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.insertBeforeNextWayPoint, _x.standByAndReplanRouteAtPoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = drone_decon.msg.GPS()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.drone_id, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.insertBeforeNextWayPoint, _x.standByAndReplanRouteAtPoint,) = _get_struct_I3d2B().unpack(str[start:end])
      self.insertBeforeNextWayPoint = bool(self.insertBeforeNextWayPoint)
      self.standByAndReplanRouteAtPoint = bool(self.standByAndReplanRouteAtPoint)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3d2B().pack(_x.drone_id, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.insertBeforeNextWayPoint, _x.standByAndReplanRouteAtPoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = drone_decon.msg.GPS()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.drone_id, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.insertBeforeNextWayPoint, _x.standByAndReplanRouteAtPoint,) = _get_struct_I3d2B().unpack(str[start:end])
      self.insertBeforeNextWayPoint = bool(self.insertBeforeNextWayPoint)
      self.standByAndReplanRouteAtPoint = bool(self.standByAndReplanRouteAtPoint)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3d2B = None
def _get_struct_I3d2B():
    global _struct_I3d2B
    if _struct_I3d2B is None:
        _struct_I3d2B = struct.Struct("<I3d2B")
    return _struct_I3d2B
