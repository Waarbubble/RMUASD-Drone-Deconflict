# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_decon/takeOffAndLandCheckRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class takeOffAndLandCheckRequest(genpy.Message):
  _md5sum = "d18bfc2001b6bb9f57d5c299264ba92c"
  _type = "drone_decon/takeOffAndLandCheckRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint32 drone_id
bool isAsending

"""
  __slots__ = ['drone_id','isAsending']
  _slot_types = ['uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drone_id,isAsending

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(takeOffAndLandCheckRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drone_id is None:
        self.drone_id = 0
      if self.isAsending is None:
        self.isAsending = False
    else:
      self.drone_id = 0
      self.isAsending = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.drone_id, _x.isAsending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.drone_id, _x.isAsending,) = _get_struct_IB().unpack(str[start:end])
      self.isAsending = bool(self.isAsending)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IB().pack(_x.drone_id, _x.isAsending))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.drone_id, _x.isAsending,) = _get_struct_IB().unpack(str[start:end])
      self.isAsending = bool(self.isAsending)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_decon/takeOffAndLandCheckResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class takeOffAndLandCheckResponse(genpy.Message):
  _md5sum = "88752e30a307e729639b5720bb8af00f"
  _type = "drone_decon/takeOffAndLandCheckResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool takeOffIsSafe
float32 maxAltitude
float32 minAltitude

"""
  __slots__ = ['takeOffIsSafe','maxAltitude','minAltitude']
  _slot_types = ['bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       takeOffIsSafe,maxAltitude,minAltitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(takeOffAndLandCheckResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.takeOffIsSafe is None:
        self.takeOffIsSafe = False
      if self.maxAltitude is None:
        self.maxAltitude = 0.
      if self.minAltitude is None:
        self.minAltitude = 0.
    else:
      self.takeOffIsSafe = False
      self.maxAltitude = 0.
      self.minAltitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2f().pack(_x.takeOffIsSafe, _x.maxAltitude, _x.minAltitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.takeOffIsSafe, _x.maxAltitude, _x.minAltitude,) = _get_struct_B2f().unpack(str[start:end])
      self.takeOffIsSafe = bool(self.takeOffIsSafe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2f().pack(_x.takeOffIsSafe, _x.maxAltitude, _x.minAltitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.takeOffIsSafe, _x.maxAltitude, _x.minAltitude,) = _get_struct_B2f().unpack(str[start:end])
      self.takeOffIsSafe = bool(self.takeOffIsSafe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2f = None
def _get_struct_B2f():
    global _struct_B2f
    if _struct_B2f is None:
        _struct_B2f = struct.Struct("<B2f")
    return _struct_B2f
class takeOffAndLandCheck(object):
  _type          = 'drone_decon/takeOffAndLandCheck'
  _md5sum = '0304b59d69afd85db4e7a6b27d94aacb'
  _request_class  = takeOffAndLandCheckRequest
  _response_class = takeOffAndLandCheckResponse
